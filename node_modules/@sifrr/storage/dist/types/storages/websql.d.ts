import Storage from './storage';
import { StorageOptions, SavedDataObject } from './types';
declare type websqlResult = {
    rows: {
        length: any;
        item: {
            (arg0: number): {
                key: string;
                value: string;
            };
        };
    };
};
declare type websqlStore = {
    transaction(a: (tx: {
        executeSql: (arg0: any, arg1: any[], arg2: (tx: any, results: websqlResult) => void) => void;
    }) => void): void;
};
declare global {
    interface Window {
        openDatabase: (name: string, version: number, z: any, a: any) => websqlStore;
    }
}
declare class WebSQL extends Storage {
    private _store;
    constructor(options: StorageOptions);
    protected parsedData(): void;
    protected select(keys: string[]): Promise<SavedDataObject>;
    protected upsert(data: object): boolean;
    protected delete(keys: string[]): boolean;
    protected deleteAll(): boolean;
    protected getStore(): Promise<SavedDataObject>;
    protected hasStore(): boolean;
    private getWebsql;
    private execSql;
    private parseResults;
    static get type(): string;
}
export default WebSQL;
