import { StorageOptions, SavedDataObject } from './types';
declare abstract class Storage {
    static type: string;
    type: string;
    name: string;
    version: string | number;
    ttl: number;
    description: string;
    size: number;
    tableName: string;
    private table;
    constructor(options?: StorageOptions);
    protected select(keys: string[]): SavedDataObject | Promise<SavedDataObject>;
    protected upsert(data: {
        [x: string]: any;
    }): boolean | Promise<boolean>;
    protected delete(keys: string[]): boolean | Promise<boolean>;
    protected deleteAll(): boolean | Promise<boolean>;
    protected getStore(): SavedDataObject | Promise<SavedDataObject>;
    protected setStore(v: {}): void;
    keys(): Promise<string[]>;
    all(): Promise<object>;
    get(key: string): Promise<object>;
    set(key: string | object, value: any): Promise<boolean>;
    del(key: string | string[]): Promise<boolean>;
    clear(): Promise<boolean>;
    memoize(func: (...arg: any[]) => Promise<any>, keyFunc?: (...arg: any[]) => string): (...args: any) => Promise<any>;
    isSupported(force?: boolean): boolean;
    protected hasStore(): boolean;
    protected isEqual(other: {
        tableName: string;
        type: string;
    }): boolean;
    protected static stringify(data: any): string;
    protected static parse(data: string): any;
    protected static _all: Array<Storage>;
    protected static _add(instance: Storage): void;
    protected static _matchingInstance<T extends Storage>(otherInstance: Storage): T;
}
export default Storage;
